import 'package:flutter/foundation.dart';
import 'package:prioris/domain/models/core/entities/custom_list.dart';
import 'package:prioris/domain/models/core/entities/list_item.dart';
import 'package:prioris/data/repositories/list_item_repository.dart';
import 'package:prioris/data/repositories/custom_list_repository.dart';

/// Mode de persistance adaptatif selon l'√©tat d'authentification
enum PersistenceMode {
  /// Donn√©es stock√©es localement uniquement (utilisateur invit√©)
  localFirst,
  
  /// Donn√©es stock√©es en cloud avec backup local (utilisateur connect√©)  
  cloudFirst,
  
  /// Synchronisation intelligente entre local et cloud
  hybrid,
}

/// Strat√©gie de migration des donn√©es locales vers le cloud
enum MigrationStrategy {
  /// Migrer toutes les donn√©es locales vers le cloud
  migrateAll,
  
  /// Demander √† l'utilisateur ce qu'il veut faire
  askUser,
  
  /// Garder uniquement les donn√©es cloud
  cloudOnly,
  
  /// Fusionner intelligemment les donn√©es
  intelligentMerge,
}

/// Service de persistance adaptatif qui g√®re intelligemment 
/// le stockage selon l'√©tat d'authentification de l'utilisateur
class AdaptivePersistenceService {
  final CustomListRepository _localRepository;
  final CustomListRepository _cloudRepository;
  final ListItemRepository _localItemRepository;
  final ListItemRepository _cloudItemRepository;
  
  PersistenceMode _currentMode = PersistenceMode.localFirst;
  bool _isAuthenticated = false;
  
  AdaptivePersistenceService({
    required CustomListRepository localRepository,
    required CustomListRepository cloudRepository,
    required ListItemRepository localItemRepository,
    required ListItemRepository cloudItemRepository,
  }) : _localRepository = localRepository,
       _cloudRepository = cloudRepository,
       _localItemRepository = localItemRepository,
       _cloudItemRepository = cloudItemRepository;

  /// Mode de persistance actuel
  PersistenceMode get currentMode => _currentMode;
  
  /// √âtat d'authentification
  bool get isAuthenticated => _isAuthenticated;

  /// Initialise le service avec l'√©tat d'authentification
  Future<void> initialize({required bool isAuthenticated}) async {
    print('üîß AdaptivePersistenceService: Initialisation avec auth=$isAuthenticated');
    
    _isAuthenticated = isAuthenticated;
    _currentMode = isAuthenticated ? PersistenceMode.cloudFirst : PersistenceMode.localFirst;
    
    print('üìä Mode de persistance: $_currentMode');
  }

  /// Met √† jour l'√©tat d'authentification et adapte la persistance
  Future<void> updateAuthenticationState({
    required bool isAuthenticated,
    MigrationStrategy? migrationStrategy,
  }) async {
    print('üîÑ Changement d\'authentification: $_isAuthenticated ‚Üí $isAuthenticated');
    
    final wasAuthenticated = _isAuthenticated;
    _isAuthenticated = isAuthenticated;
    
    if (!wasAuthenticated && isAuthenticated) {
      // Transition: Invit√© ‚Üí Connect√©
      await _handleGuestToAuthenticatedTransition(
        migrationStrategy ?? MigrationStrategy.intelligentMerge,
      );
      _currentMode = PersistenceMode.cloudFirst;
    } else if (wasAuthenticated && !isAuthenticated) {
      // Transition: Connect√© ‚Üí Invit√©
      await _handleAuthenticatedToGuestTransition();
      _currentMode = PersistenceMode.localFirst;
    }
    
    print('üìä Nouveau mode de persistance: $_currentMode');
  }

  /// R√©cup√®re toutes les listes selon le mode actuel
  Future<List<CustomList>> getAllLists() async {
    try {
      switch (_currentMode) {
        case PersistenceMode.localFirst:
          return await _localRepository.getAllLists();
          
        case PersistenceMode.cloudFirst:
          // Essayer cloud d'abord, fallback vers local
          try {
            final cloudLists = await _cloudRepository.getAllLists();
            // Sync en arri√®re-plan vers local pour backup
            _syncCloudToLocalAsync(cloudLists);
            return cloudLists;
          } catch (e) {
            print('‚ö†Ô∏è Cloud indisponible, fallback vers local: $e');
            return await _localRepository.getAllLists();
          }
          
        case PersistenceMode.hybrid:
          return await _getHybridLists();
      }
    } catch (e) {
      print('‚ùå Erreur lors de la r√©cup√©ration des listes: $e');
      rethrow;
    }
  }

  /// Sauvegarde une liste selon le mode actuel
  Future<void> saveList(CustomList list) async {
    try {
      switch (_currentMode) {
        case PersistenceMode.localFirst:
          await _localRepository.saveList(list);
          break;
          
        case PersistenceMode.cloudFirst:
          // Sauvegarder en local d'abord (r√©ponse imm√©diate)
          await _localRepository.saveList(list);
          // Sync vers cloud en arri√®re-plan
          _syncListToCloudAsync(list);
          break;
          
        case PersistenceMode.hybrid:
          await _saveHybridList(list);
          break;
      }
      
      print('‚úÖ Liste "${list.name}" sauvegard√©e en mode $_currentMode');
    } catch (e) {
      print('‚ùå Erreur lors de la sauvegarde: $e');
      rethrow;
    }
  }

  /// Supprime une liste selon le mode actuel
  Future<void> deleteList(String listId) async {
    try {
      switch (_currentMode) {
        case PersistenceMode.localFirst:
          await _localRepository.deleteList(listId);
          break;
          
        case PersistenceMode.cloudFirst:
          // Supprimer en local d'abord
          await _localRepository.deleteList(listId);
          // Sync suppression vers cloud en arri√®re-plan
          _deleteListFromCloudAsync(listId);
          break;
          
        case PersistenceMode.hybrid:
          await _deleteHybridList(listId);
          break;
      }
      
      print('üóëÔ∏è Liste $listId supprim√©e en mode $_currentMode');
    } catch (e) {
      print('‚ùå Erreur lors de la suppression: $e');
      rethrow;
    }
  }

  /// R√©cup√®re tous les items d'une liste selon le mode actuel
  Future<List<ListItem>> getItemsByListId(String listId) async {
    try {
      switch (_currentMode) {
        case PersistenceMode.localFirst:
          return await _localItemRepository.getByListId(listId);
          
        case PersistenceMode.cloudFirst:
          // Essayer cloud d'abord, fallback vers local
          try {
            final cloudItems = await _cloudItemRepository.getByListId(listId);
            // Sync en arri√®re-plan vers local pour backup
            _syncItemsToLocalAsync(listId, cloudItems);
            return cloudItems;
          } catch (e) {
            print('‚ö†Ô∏è Cloud indisponible pour items, fallback vers local: $e');
            return await _localItemRepository.getByListId(listId);
          }
          
        case PersistenceMode.hybrid:
          return await _getHybridItems(listId);
      }
    } catch (e) {
      print('‚ùå Erreur lors de la r√©cup√©ration des items: $e');
      rethrow;
    }
  }

  /// Sauvegarde un item selon le mode actuel
  Future<void> saveItem(ListItem item) async {
    try {
      switch (_currentMode) {
        case PersistenceMode.localFirst:
          await _localItemRepository.add(item);
          break;
          
        case PersistenceMode.cloudFirst:
          // Sauvegarder en local d'abord (r√©ponse imm√©diate)
          await _localItemRepository.add(item);
          // Sync vers cloud en arri√®re-plan
          _syncItemToCloudAsync(item);
          break;
          
        case PersistenceMode.hybrid:
          await _saveHybridItem(item);
          break;
      }
      
      print('‚úÖ Item "${item.title}" sauvegard√© en mode $_currentMode');
    } catch (e) {
      print('‚ùå Erreur lors de la sauvegarde d\'item: $e');
      rethrow;
    }
  }

  /// Met √† jour un item selon le mode actuel
  Future<void> updateItem(ListItem item) async {
    try {
      switch (_currentMode) {
        case PersistenceMode.localFirst:
          await _localItemRepository.update(item);
          break;
          
        case PersistenceMode.cloudFirst:
          // Mettre √† jour en local d'abord
          await _localItemRepository.update(item);
          // Sync vers cloud en arri√®re-plan
          _syncItemToCloudAsync(item);
          break;
          
        case PersistenceMode.hybrid:
          await _updateHybridItem(item);
          break;
      }
      
      print('‚úÖ Item "${item.title}" mis √† jour en mode $_currentMode');
    } catch (e) {
      print('‚ùå Erreur lors de la mise √† jour d\'item: $e');
      rethrow;
    }
  }

  /// Supprime un item selon le mode actuel
  Future<void> deleteItem(String itemId) async {
    try {
      switch (_currentMode) {
        case PersistenceMode.localFirst:
          await _localItemRepository.delete(itemId);
          break;
          
        case PersistenceMode.cloudFirst:
          // Supprimer en local d'abord
          await _localItemRepository.delete(itemId);
          // Sync suppression vers cloud en arri√®re-plan
          _deleteItemFromCloudAsync(itemId);
          break;
          
        case PersistenceMode.hybrid:
          await _deleteHybridItem(itemId);
          break;
      }
      
      print('üóëÔ∏è Item $itemId supprim√© en mode $_currentMode');
    } catch (e) {
      print('‚ùå Erreur lors de la suppression d\'item: $e');
      rethrow;
    }
  }

  /// G√®re la transition Invit√© ‚Üí Connect√©
  Future<void> _handleGuestToAuthenticatedTransition(
    MigrationStrategy strategy,
  ) async {
    print('üîÑ Transition Invit√© ‚Üí Connect√© avec strat√©gie: $strategy');
    
    try {
      final localLists = await _localRepository.getAllLists();
      
      if (localLists.isEmpty) {
        print('üì≠ Aucune donn√©e locale √† migrer');
        return;
      }
      
      print('üì¶ Migration de ${localLists.length} listes vers le cloud');
      
      switch (strategy) {
        case MigrationStrategy.migrateAll:
          await _migrateAllDataToCloud(localLists);
          break;
          
        case MigrationStrategy.intelligentMerge:
          await _intelligentMergeToCloud(localLists);
          break;
          
        case MigrationStrategy.cloudOnly:
          // Ne rien migrer, utiliser uniquement les donn√©es cloud
          break;
          
        case MigrationStrategy.askUser:
          // TODO: Impl√©menter dialogue utilisateur
          await _intelligentMergeToCloud(localLists);
          break;
      }
      
      print('‚úÖ Migration termin√©e');
    } catch (e) {
      print('‚ùå Erreur pendant la migration: $e');
      // En cas d'erreur, conserver les donn√©es locales
    }
  }

  /// G√®re la transition Connect√© ‚Üí Invit√©
  Future<void> _handleAuthenticatedToGuestTransition() async {
    print('üîÑ Transition Connect√© ‚Üí Invit√©');
    
    try {
      // Synchroniser les derni√®res donn√©es cloud vers local
      final cloudLists = await _cloudRepository.getAllLists();
      for (final list in cloudLists) {
        await _localRepository.saveList(list);
      }
      
      print('‚úÖ Synchronisation cloud ‚Üí local termin√©e');
    } catch (e) {
      print('‚ö†Ô∏è Impossible de synchroniser avant d√©connexion: $e');
      // Continuer avec les donn√©es locales existantes
    }
  }

  /// Migration intelligente avec fusion des donn√©es
  Future<void> _intelligentMergeToCloud(List<CustomList> localLists) async {
    try {
      final cloudLists = await _cloudRepository.getAllLists();
      final cloudListsMap = {for (var list in cloudLists) list.id: list};
      
      for (final localList in localLists) {
        final cloudList = cloudListsMap[localList.id];
        
        if (cloudList == null) {
          // Nouvelle liste locale ‚Üí migrer vers cloud
          await _cloudRepository.saveList(localList);
          print('üì§ Liste "${localList.name}" migr√©e vers cloud');
        } else {
          // Conflit ‚Üí r√©soudre avec la plus r√©cente
          final mergedList = _resolveMergeConflict(localList, cloudList);
          await _cloudRepository.saveList(mergedList);
          print('üîÄ Liste "${mergedList.name}" fusionn√©e');
        }
      }
    } catch (e) {
      print('‚ùå Erreur lors de la fusion intelligente: $e');
      rethrow;
    }
  }

  /// R√©sout les conflits de fusion (derni√®re modification gagne)
  CustomList _resolveMergeConflict(CustomList local, CustomList cloud) {
    // Utiliser la liste la plus r√©cemment modifi√©e
    if (local.updatedAt != null && cloud.updatedAt != null) {
      return local.updatedAt!.isAfter(cloud.updatedAt!) ? local : cloud;
    } else if (local.updatedAt != null) {
      return local;
    } else if (cloud.updatedAt != null) {
      return cloud;
    } else {
      // Aucune date, garder la locale par s√©curit√©
      return local;
    }
  }

  /// Migration compl√®te vers le cloud
  Future<void> _migrateAllDataToCloud(List<CustomList> localLists) async {
    for (final list in localLists) {
      try {
        await _cloudRepository.saveList(list);
        print('üì§ Liste "${list.name}" migr√©e');
      } catch (e) {
        print('‚ùå Erreur migration liste "${list.name}": $e');
      }
    }
  }

  /// Synchronisation asynchrone vers le cloud
  void _syncListToCloudAsync(CustomList list) {
    if (!_isAuthenticated) return;
    
    Future.microtask(() async {
      try {
        print('üîÑ Tentative sync cloud pour "${list.name}"...');
        print('üìã JSON envoy√©: ${list.toJson()}');
        await _cloudRepository.saveList(list);
        print('‚úÖ Sync cloud r√©ussie pour "${list.name}"');
      } catch (e) {
        print('‚ùå √âchec sync cloud pour "${list.name}": $e');
        // TODO: Ajouter √† une queue de retry
      }
    });
  }

  /// Synchronisation asynchrone du cloud vers local
  void _syncCloudToLocalAsync(List<CustomList> cloudLists) {
    Future.microtask(() async {
      try {
        for (final list in cloudLists) {
          await _localRepository.saveList(list);
        }
        print('üîÑ Backup local mis √† jour');
      } catch (e) {
        print('‚ö†Ô∏è √âchec backup local: $e');
      }
    });
  }

  /// Suppression asynchrone du cloud
  void _deleteListFromCloudAsync(String listId) {
    if (!_isAuthenticated) return;
    
    Future.microtask(() async {
      try {
        await _cloudRepository.deleteList(listId);
        print('üîÑ Suppression cloud r√©ussie pour $listId');
      } catch (e) {
        print('‚ö†Ô∏è √âchec suppression cloud pour $listId: $e');
      }
    });
  }

  /// Synchronisation asynchrone d'un item vers le cloud
  void _syncItemToCloudAsync(ListItem item) {
    if (!_isAuthenticated) return;
    
    Future.microtask(() async {
      try {
        await _cloudItemRepository.add(item);
        print('üîÑ Sync cloud item r√©ussie pour "${item.title}"');
      } catch (e) {
        print('‚ö†Ô∏è √âchec sync cloud item pour "${item.title}": $e');
        // TODO: Ajouter √† une queue de retry
      }
    });
  }

  /// Synchronisation asynchrone d'items vers le local
  void _syncItemsToLocalAsync(String listId, List<ListItem> items) {
    Future.microtask(() async {
      try {
        for (final item in items) {
          await _localItemRepository.add(item);
        }
        print('üîÑ Backup local items mis √† jour pour liste $listId');
      } catch (e) {
        print('‚ö†Ô∏è √âchec backup local items: $e');
      }
    });
  }

  /// Suppression asynchrone d'item du cloud
  void _deleteItemFromCloudAsync(String itemId) {
    if (!_isAuthenticated) return;
    
    Future.microtask(() async {
      try {
        await _cloudItemRepository.delete(itemId);
        print('üîÑ Suppression cloud item r√©ussie pour $itemId');
      } catch (e) {
        print('‚ö†Ô∏è √âchec suppression cloud item pour $itemId: $e');
      }
    });
  }

  // M√©thodes hybrides (pour usage futur)
  Future<List<CustomList>> _getHybridLists() async {
    // TODO: Impl√©menter logique hybride avanc√©e
    return await getAllLists();
  }

  Future<void> _saveHybridList(CustomList list) async {
    // TODO: Impl√©menter sauvegarde hybride
    await saveList(list);
  }

  Future<void> _deleteHybridList(String listId) async {
    // TODO: Impl√©menter suppression hybride
    await deleteList(listId);
  }

  /// M√©thodes hybrides pour items (pour usage futur)
  Future<List<ListItem>> _getHybridItems(String listId) async {
    // TODO: Impl√©menter logique hybride avanc√©e pour items
    return await getItemsByListId(listId);
  }

  Future<void> _saveHybridItem(ListItem item) async {
    // TODO: Impl√©menter sauvegarde hybride item
    await saveItem(item);
  }

  Future<void> _updateHybridItem(ListItem item) async {
    // TODO: Impl√©menter update hybride item
    await updateItem(item);
  }

  Future<void> _deleteHybridItem(String itemId) async {
    // TODO: Impl√©menter suppression hybride item
    await deleteItem(itemId);
  }

  /// Nettoie les ressources
  void dispose() {
    print('üßπ AdaptivePersistenceService: Nettoyage des ressources');
  }
}