import 'package:flutter/services.dart';
import 'package:flutter/semantics.dart';

/// Service centralis√© pour l'accessibilit√© et les annonces de lecteurs d'√©cran
/// 
/// WCAG 2.1 AA Compliance:
/// - 4.1.3 : Messages de statut
/// - 1.4.13 : Contenu qui appara√Æt au survol ou au focus
/// - 2.4.3 : Ordre de focus
class AccessibilityService {
  static final AccessibilityService _instance = AccessibilityService._internal();
  factory AccessibilityService() => _instance;
  AccessibilityService._internal();

  /// WCAG 4.1.3 : Annonce un message de statut aux lecteurs d'√©cran
  /// 
  /// [message] : Le message √† annoncer
  /// [assertiveness] : Niveau d'urgence (polite ou assertive)
  static Future<void> announceStatus(
    String message, {
    Assertiveness assertiveness = Assertiveness.polite,
  }) async {
    try {
      await SystemChannels.accessibility.invokeMethod<void>(
        'announce',
        <String, dynamic>{
          'message': message,
          'textDirection': 'ltr',
        },
      );
    } catch (e) {
      // Fallback silencieux si les services d'accessibilit√© ne sont pas disponibles
      print('üîä AccessibilityService: $message');
    }
  }

  /// WCAG 4.1.3 : Annonce une erreur avec priorit√© haute
  static Future<void> announceError(String errorMessage) async {
    await announceStatus(
      'Erreur: $errorMessage',
      assertiveness: Assertiveness.assertive,
    );
  }

  /// WCAG 4.1.3 : Annonce le d√©but d'un chargement
  static Future<void> announceLoadingStart([String? context]) async {
    final message = context != null 
        ? 'Chargement de $context en cours'
        : 'Chargement en cours';
    await announceStatus(message);
  }

  /// WCAG 4.1.3 : Annonce la fin d'un chargement
  static Future<void> announceLoadingComplete([String? context]) async {
    final message = context != null 
        ? '$context charg√© avec succ√®s'
        : 'Chargement termin√©';
    await announceStatus(message);
  }

  /// WCAG 4.1.3 : Annonce une action r√©ussie
  static Future<void> announceSuccess(String message) async {
    await announceStatus('Succ√®s: $message');
  }

  /// V√©rifie si les services d'accessibilit√© sont activ√©s
  static bool get isScreenReaderEnabled {
    // En Flutter, cette v√©rification se fait via le binding
    try {
      return WidgetsBinding.instance.platformDispatcher.accessibilityFeatures.accessibleNavigation;
    } catch (e) {
      return false;
    }
  }

  /// Messages d'accessibilit√© pr√©d√©finis pour les op√©rations communes
  static class Messages {
    // Messages de chargement
    static const String loadingLists = 'Chargement des listes';
    static const String loadingItems = 'Chargement des √©l√©ments';
    static const String savingData = 'Sauvegarde des donn√©es';
    static const String syncingData = 'Synchronisation des donn√©es';
    
    // Messages de succ√®s
    static const String listCreated = 'Liste cr√©√©e avec succ√®s';
    static const String itemAdded = '√âl√©ment ajout√© √† la liste';
    static const String itemCompleted = '√âl√©ment marqu√© comme termin√©';
    static const String dataSync = 'Donn√©es synchronis√©es';
    
    // Messages d'erreur
    static const String networkError = 'Erreur de connexion r√©seau';
    static const String saveError = 'Erreur lors de la sauvegarde';
    static const String loadError = 'Erreur lors du chargement';
    
    // Messages de navigation
    static const String navigatedToList = 'Navigation vers la liste';
    static const String backToLists = 'Retour √† la vue des listes';
    
    // Messages de statut de synchronisation
    static const String offlineMode = 'Mode hors ligne activ√©';
    static const String onlineMode = 'Connexion r√©tablie';
    static const String syncInProgress = 'Synchronisation en cours';
    static const String conflictResolved = 'Conflit de donn√©es r√©solu automatiquement';
  }
}

/// Extension pour faciliter les annonces d'accessibilit√© dans les controllers
extension AccessibilityControllerExtension on Object {
  /// Annonce le d√©but d'une op√©ration
  Future<void> announceStart(String operation) async {
    await AccessibilityService.announceLoadingStart(operation);
  }
  
  /// Annonce le succ√®s d'une op√©ration
  Future<void> announceComplete(String operation) async {
    await AccessibilityService.announceLoadingComplete(operation);
  }
  
  /// Annonce une erreur
  Future<void> announceError(String error) async {
    await AccessibilityService.announceError(error);
  }
}

/// Niveau d'assertivit√© pour les annonces de lecteurs d'√©cran
enum Assertiveness {
  /// Poli - annonce quand l'utilisateur a fini de parler/naviguer
  polite,
  
  /// Assertif - interrompt imm√©diatement la lecture en cours
  assertive,
}