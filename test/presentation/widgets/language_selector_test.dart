import 'package:flutter/material.dart';
import 'package:flutter_test/flutter_test.dart';
import 'package:flutter_riverpod/flutter_riverpod.dart';
import 'package:prioris/domain/services/core/language_service.dart';
import 'package:prioris/presentation/widgets/selectors/language_selector.dart';

void main() {
  group('LanguageSelector', () {
    late LanguageService mockLanguageService;

    setUp(() {
      mockLanguageService = LanguageService();
    });

    Widget createTestWidget(Widget child) {
      return ProviderScope(
        overrides: [
          languageServiceProvider.overrideWithValue(mockLanguageService),
        ],
        child: MaterialApp(
          home: Scaffold(
            body: child,
          ),
        ),
      );
    }

    group('LanguageSelector', () {
      testWidgets('should display language selector with all supported languages', (WidgetTester tester) async {
        await tester.pumpWidget(createTestWidget(const LanguageSelector()));

        // VÃ©rifier que le titre est affichÃ©
        expect(find.text('Language'), findsOneWidget);
        expect(find.byIcon(Icons.language), findsOneWidget);

        // VÃ©rifier que toutes les langues supportÃ©es sont affichÃ©es
        expect(find.text('English'), findsOneWidget);
        expect(find.text('FranÃ§ais'), findsOneWidget);
        expect(find.text('EspaÃ±ol'), findsOneWidget);
        expect(find.text('Deutsch'), findsOneWidget);

        // VÃ©rifier que les drapeaux sont affichÃ©s
        expect(find.text('ðŸ‡ºðŸ‡¸'), findsOneWidget);
        expect(find.text('ðŸ‡«ðŸ‡·'), findsOneWidget);
        expect(find.text('ðŸ‡ªðŸ‡¸'), findsOneWidget);
        expect(find.text('ðŸ‡©ðŸ‡ª'), findsOneWidget);
      });

      testWidgets('should highlight current language', (WidgetTester tester) async {
        await tester.pumpWidget(createTestWidget(const LanguageSelector()));

        // La langue par dÃ©faut (anglais) devrait Ãªtre sÃ©lectionnÃ©e
        expect(find.byIcon(Icons.check_circle), findsOneWidget);
      });

      testWidgets('should change language when tapped', (WidgetTester tester) async {
        await tester.pumpWidget(createTestWidget(const LanguageSelector()));

        // Taper sur l'option franÃ§aise
        await tester.tap(find.text('FranÃ§ais'));
        await tester.pumpAndSettle();

        // VÃ©rifier que le snackbar s'affiche
        expect(find.text('Language changed to FranÃ§ais'), findsOneWidget);
      });

      testWidgets('should have correct styling for selected language', (WidgetTester tester) async {
        await tester.pumpWidget(createTestWidget(const LanguageSelector()));

        // VÃ©rifier que l'option sÃ©lectionnÃ©e a le bon style
        final selectedOption = find.ancestor(
          of: find.byIcon(Icons.check_circle),
          matching: find.byType(Container),
        );
        expect(selectedOption, findsOneWidget);
      });
    });

    group('CompactLanguageSelector', () {
      testWidgets('should display compact language selector', (WidgetTester tester) async {
        await tester.pumpWidget(createTestWidget(const CompactLanguageSelector()));

        // VÃ©rifier que le ListTile est affichÃ©
        expect(find.byType(ListTile), findsOneWidget);
        expect(find.text('Language'), findsOneWidget);
        expect(find.byIcon(Icons.language), findsOneWidget);
        expect(find.byIcon(Icons.arrow_forward_ios), findsOneWidget);
      });

      testWidgets('should display current language with flag', (WidgetTester tester) async {
        await tester.pumpWidget(createTestWidget(const CompactLanguageSelector()));

        // VÃ©rifier que la langue actuelle est affichÃ©e avec son drapeau
        expect(find.textContaining('ðŸ‡ºðŸ‡¸'), findsOneWidget);
        expect(find.textContaining('English'), findsOneWidget);
      });

      testWidgets('should show language dialog when tapped', (WidgetTester tester) async {
        await tester.pumpWidget(createTestWidget(const CompactLanguageSelector()));

        // Taper sur le ListTile
        await tester.tap(find.byType(ListTile));
        await tester.pumpAndSettle();

        // VÃ©rifier que le dialogue s'affiche
        expect(find.byType(AlertDialog), findsOneWidget);
        expect(find.text('Cancel'), findsOneWidget);
      });

      testWidgets('should display all languages in dialog', (WidgetTester tester) async {
        await tester.pumpWidget(createTestWidget(const CompactLanguageSelector()));

        // Ouvrir le dialogue
        await tester.tap(find.byType(ListTile));
        await tester.pumpAndSettle();

        // VÃ©rifier que toutes les langues sont affichÃ©es
        expect(find.text('English'), findsOneWidget);
        expect(find.text('FranÃ§ais'), findsOneWidget);
        expect(find.text('EspaÃ±ol'), findsOneWidget);
        expect(find.text('Deutsch'), findsOneWidget);

        // VÃ©rifier que les drapeaux sont affichÃ©s
        expect(find.text('ðŸ‡ºðŸ‡¸'), findsOneWidget);
        expect(find.text('ðŸ‡«ðŸ‡·'), findsOneWidget);
        expect(find.text('ðŸ‡ªðŸ‡¸'), findsOneWidget);
        expect(find.text('ðŸ‡©ðŸ‡ª'), findsOneWidget);
      });

      testWidgets('should change language when option is selected in dialog', (WidgetTester tester) async {
        await tester.pumpWidget(createTestWidget(const CompactLanguageSelector()));

        // Ouvrir le dialogue
        await tester.tap(find.byType(ListTile));
        await tester.pumpAndSettle();

        // SÃ©lectionner l'espagnol
        await tester.tap(find.text('EspaÃ±ol'));
        await tester.pumpAndSettle();

        // VÃ©rifier que le dialogue se ferme
        expect(find.byType(AlertDialog), findsNothing);

        // VÃ©rifier que le snackbar s'affiche
        expect(find.text('Language changed to EspaÃ±ol'), findsOneWidget);
      });

      testWidgets('should close dialog when cancel is tapped', (WidgetTester tester) async {
        await tester.pumpWidget(createTestWidget(const CompactLanguageSelector()));

        // Ouvrir le dialogue
        await tester.tap(find.byType(ListTile));
        await tester.pumpAndSettle();

        // Taper sur Cancel
        await tester.tap(find.text('Cancel'));
        await tester.pumpAndSettle();

        // VÃ©rifier que le dialogue se ferme
        expect(find.byType(AlertDialog), findsNothing);
      });

      testWidgets('should highlight current language in dialog', (WidgetTester tester) async {
        await tester.pumpWidget(createTestWidget(const CompactLanguageSelector()));

        // Ouvrir le dialogue
        await tester.tap(find.byType(ListTile));
        await tester.pumpAndSettle();

        // VÃ©rifier que l'anglais (langue par dÃ©faut) est sÃ©lectionnÃ©
        expect(find.byIcon(Icons.check_circle), findsOneWidget);
      });
    });

    group('Integration tests', () {
      testWidgets('should maintain language selection across widget rebuilds', (WidgetTester tester) async {
        await tester.pumpWidget(createTestWidget(const LanguageSelector()));

        // Changer la langue
        await tester.tap(find.text('FranÃ§ais'));
        await tester.pumpAndSettle();

        // Reconstruire le widget
        await tester.pumpWidget(createTestWidget(const LanguageSelector()));
        await tester.pumpAndSettle();

        // VÃ©rifier que la sÃ©lection est maintenue
        expect(find.byIcon(Icons.check_circle), findsOneWidget);
      });

      testWidgets('should update both selectors when language changes', (WidgetTester tester) async {
        await tester.pumpWidget(createTestWidget(
          Column(
            children: const [
              LanguageSelector(),
              CompactLanguageSelector(),
            ],
          ),
        ));

        // Changer la langue avec le sÃ©lecteur principal
        await tester.tap(find.text('Deutsch'));
        await tester.pumpAndSettle();

        // VÃ©rifier que le sÃ©lecteur compact est mis Ã  jour
        expect(find.textContaining('ðŸ‡©ðŸ‡ª Deutsch'), findsOneWidget);
      });
    });
  });
} 
