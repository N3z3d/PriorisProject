// Mocks generated by Mockito 5.4.5 from annotations
// in prioris/test/presentation/controllers/lists_controller_adaptive_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i3;
import 'package:prioris/domain/models/core/entities/custom_list.dart' as _i5;
import 'package:prioris/domain/models/core/entities/list_item.dart' as _i6;
import 'package:prioris/domain/models/core/enums/list_enums.dart' as _i8;
import 'package:prioris/domain/services/core/lists_filter_service.dart' as _i7;
import 'package:prioris/domain/services/persistence/adaptive_persistence_service.dart'
    as _i2;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

/// A class which mocks [AdaptivePersistenceService].
///
/// See the documentation for Mockito's code generation for more information.
class MockAdaptivePersistenceService extends _i1.Mock
    implements _i2.AdaptivePersistenceService {
  MockAdaptivePersistenceService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  String get currentMode => (super.noSuchMethod(
        Invocation.getter(#currentMode),
        returnValue: _i3.dummyValue<String>(
          this,
          Invocation.getter(#currentMode),
        ),
      ) as String);

  @override
  _i4.Future<List<_i5.CustomList>> getAllLists() => (super.noSuchMethod(
        Invocation.method(
          #getAllLists,
          [],
        ),
        returnValue: _i4.Future<List<_i5.CustomList>>.value(<_i5.CustomList>[]),
      ) as _i4.Future<List<_i5.CustomList>>);

  @override
  _i4.Future<void> saveList(_i5.CustomList? list) => (super.noSuchMethod(
        Invocation.method(
          #saveList,
          [list],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<void> deleteList(String? listId) => (super.noSuchMethod(
        Invocation.method(
          #deleteList,
          [listId],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<List<_i6.ListItem>> getItemsByListId(String? listId) =>
      (super.noSuchMethod(
        Invocation.method(
          #getItemsByListId,
          [listId],
        ),
        returnValue: _i4.Future<List<_i6.ListItem>>.value(<_i6.ListItem>[]),
      ) as _i4.Future<List<_i6.ListItem>>);

  @override
  _i4.Future<void> saveItem(_i6.ListItem? item) => (super.noSuchMethod(
        Invocation.method(
          #saveItem,
          [item],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<void> updateItem(_i6.ListItem? item) => (super.noSuchMethod(
        Invocation.method(
          #updateItem,
          [item],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<void> deleteItem(String? itemId) => (super.noSuchMethod(
        Invocation.method(
          #deleteItem,
          [itemId],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);
}

/// A class which mocks [ListsFilterService].
///
/// See the documentation for Mockito's code generation for more information.
class MockListsFilterService extends _i1.Mock
    implements _i7.ListsFilterService {
  MockListsFilterService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  List<_i5.CustomList> applyFilters(
    List<_i5.CustomList>? lists, {
    String? searchQuery = '',
    _i8.ListType? selectedType,
    bool? showCompleted = true,
    bool? showInProgress = true,
    String? selectedDateFilter,
    _i7.SortOption? sortOption = _i7.SortOption.NAME_ASC,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #applyFilters,
          [lists],
          {
            #searchQuery: searchQuery,
            #selectedType: selectedType,
            #showCompleted: showCompleted,
            #showInProgress: showInProgress,
            #selectedDateFilter: selectedDateFilter,
            #sortOption: sortOption,
          },
        ),
        returnValue: <_i5.CustomList>[],
      ) as List<_i5.CustomList>);

  @override
  void clearCache() => super.noSuchMethod(
        Invocation.method(
          #clearCache,
          [],
        ),
        returnValueForMissingStub: null,
      );
}
