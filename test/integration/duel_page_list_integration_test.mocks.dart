// Mocks generated by Mockito 5.4.5 from annotations
// in prioris/test/integration/duel_page_list_integration_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i3;

import 'package:mockito/mockito.dart' as _i1;
import 'package:prioris/data/repositories/task_repository.dart' as _i2;
import 'package:prioris/domain/models/core/entities/task.dart' as _i4;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

/// A class which mocks [TaskRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockTaskRepository extends _i1.Mock implements _i2.TaskRepository {
  @override
  _i3.Future<List<_i4.Task>> getAllTasks() => (super.noSuchMethod(
        Invocation.method(
          #getAllTasks,
          [],
        ),
        returnValue: _i3.Future<List<_i4.Task>>.value(<_i4.Task>[]),
        returnValueForMissingStub:
            _i3.Future<List<_i4.Task>>.value(<_i4.Task>[]),
      ) as _i3.Future<List<_i4.Task>>);

  @override
  _i3.Future<void> saveTask(_i4.Task? task) => (super.noSuchMethod(
        Invocation.method(
          #saveTask,
          [task],
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);

  @override
  _i3.Future<void> updateTask(_i4.Task? task) => (super.noSuchMethod(
        Invocation.method(
          #updateTask,
          [task],
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);

  @override
  _i3.Future<void> deleteTask(String? taskId) => (super.noSuchMethod(
        Invocation.method(
          #deleteTask,
          [taskId],
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);

  @override
  _i3.Future<List<_i4.Task>> getActiveTasks() => (super.noSuchMethod(
        Invocation.method(
          #getActiveTasks,
          [],
        ),
        returnValue: _i3.Future<List<_i4.Task>>.value(<_i4.Task>[]),
        returnValueForMissingStub:
            _i3.Future<List<_i4.Task>>.value(<_i4.Task>[]),
      ) as _i3.Future<List<_i4.Task>>);

  @override
  _i3.Future<List<_i4.Task>> getCompletedTasks() => (super.noSuchMethod(
        Invocation.method(
          #getCompletedTasks,
          [],
        ),
        returnValue: _i3.Future<List<_i4.Task>>.value(<_i4.Task>[]),
        returnValueForMissingStub:
            _i3.Future<List<_i4.Task>>.value(<_i4.Task>[]),
      ) as _i3.Future<List<_i4.Task>>);

  @override
  _i3.Future<List<_i4.Task>> getTasksByCategory(String? category) =>
      (super.noSuchMethod(
        Invocation.method(
          #getTasksByCategory,
          [category],
        ),
        returnValue: _i3.Future<List<_i4.Task>>.value(<_i4.Task>[]),
        returnValueForMissingStub:
            _i3.Future<List<_i4.Task>>.value(<_i4.Task>[]),
      ) as _i3.Future<List<_i4.Task>>);

  @override
  _i3.Future<void> clearAllTasks() => (super.noSuchMethod(
        Invocation.method(
          #clearAllTasks,
          [],
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);

  @override
  _i3.Future<void> updateEloScores(
    _i4.Task? winner,
    _i4.Task? loser,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #updateEloScores,
          [
            winner,
            loser,
          ],
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);

  @override
  _i3.Future<List<_i4.Task>> getRandomTasksForDuel() => (super.noSuchMethod(
        Invocation.method(
          #getRandomTasksForDuel,
          [],
        ),
        returnValue: _i3.Future<List<_i4.Task>>.value(<_i4.Task>[]),
        returnValueForMissingStub:
            _i3.Future<List<_i4.Task>>.value(<_i4.Task>[]),
      ) as _i3.Future<List<_i4.Task>>);
}
