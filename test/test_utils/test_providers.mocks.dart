// Mocks generated by Mockito 5.4.5 from annotations
// in prioris/test/test_utils/test_providers.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i5;

import 'package:flutter_riverpod/flutter_riverpod.dart' as _i4;
import 'package:mockito/mockito.dart' as _i1;
import 'package:prioris/data/repositories/custom_list_repository.dart' as _i10;
import 'package:prioris/data/repositories/list_item_repository.dart' as _i11;
import 'package:prioris/domain/models/core/entities/custom_list.dart' as _i8;
import 'package:prioris/domain/models/core/entities/list_item.dart' as _i3;
import 'package:prioris/domain/models/core/enums/list_enums.dart' as _i6;
import 'package:prioris/domain/services/core/lists_filter_service.dart' as _i7;
import 'package:prioris/presentation/pages/lists/controllers/lists_controller.dart'
    as _i2;
import 'package:state_notifier/state_notifier.dart' as _i9;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeListsState_0 extends _i1.SmartFake implements _i2.ListsState {
  _FakeListsState_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeListItem_1 extends _i1.SmartFake implements _i3.ListItem {
  _FakeListItem_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [ListsController].
///
/// See the documentation for Mockito's code generation for more information.
class MockListsControllerTest extends _i1.Mock implements _i2.ListsController {
  MockListsControllerTest() {
    _i1.throwOnMissingStub(this);
  }

  @override
  set onError(_i4.ErrorListener? _onError) => super.noSuchMethod(
        Invocation.setter(
          #onError,
          _onError,
        ),
        returnValueForMissingStub: null,
      );

  @override
  bool get mounted => (super.noSuchMethod(
        Invocation.getter(#mounted),
        returnValue: false,
      ) as bool);

  @override
  _i5.Stream<_i2.ListsState> get stream => (super.noSuchMethod(
        Invocation.getter(#stream),
        returnValue: _i5.Stream<_i2.ListsState>.empty(),
      ) as _i5.Stream<_i2.ListsState>);

  @override
  _i2.ListsState get state => (super.noSuchMethod(
        Invocation.getter(#state),
        returnValue: _FakeListsState_0(
          this,
          Invocation.getter(#state),
        ),
      ) as _i2.ListsState);

  @override
  set state(_i2.ListsState? value) => super.noSuchMethod(
        Invocation.setter(
          #state,
          value,
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i2.ListsState get debugState => (super.noSuchMethod(
        Invocation.getter(#debugState),
        returnValue: _FakeListsState_0(
          this,
          Invocation.getter(#debugState),
        ),
      ) as _i2.ListsState);

  @override
  bool get hasListeners => (super.noSuchMethod(
        Invocation.getter(#hasListeners),
        returnValue: false,
      ) as bool);

  @override
  _i5.Future<void> loadLists() => (super.noSuchMethod(
        Invocation.method(
          #loadLists,
          [],
        ),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);

  @override
  _i5.Future<void> clearAllData() => (super.noSuchMethod(
        Invocation.method(
          #clearAllData,
          [],
        ),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);

  @override
  _i5.Future<void> forceReloadFromPersistence() => (super.noSuchMethod(
        Invocation.method(
          #forceReloadFromPersistence,
          [],
        ),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);

  @override
  void updateSearchQuery(String? query) => super.noSuchMethod(
        Invocation.method(
          #updateSearchQuery,
          [query],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void updateTypeFilter(_i6.ListType? type) => super.noSuchMethod(
        Invocation.method(
          #updateTypeFilter,
          [type],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void updateShowCompleted(bool? show) => super.noSuchMethod(
        Invocation.method(
          #updateShowCompleted,
          [show],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void updateShowInProgress(bool? show) => super.noSuchMethod(
        Invocation.method(
          #updateShowInProgress,
          [show],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void updateDateFilter(String? filter) => super.noSuchMethod(
        Invocation.method(
          #updateDateFilter,
          [filter],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void updateSortOption(_i7.SortOption? option) => super.noSuchMethod(
        Invocation.method(
          #updateSortOption,
          [option],
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i5.Future<void> createList(_i8.CustomList? list) => (super.noSuchMethod(
        Invocation.method(
          #createList,
          [list],
        ),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);

  @override
  _i5.Future<void> updateList(_i8.CustomList? list) => (super.noSuchMethod(
        Invocation.method(
          #updateList,
          [list],
        ),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);

  @override
  _i5.Future<void> deleteList(String? listId) => (super.noSuchMethod(
        Invocation.method(
          #deleteList,
          [listId],
        ),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);

  @override
  _i5.Future<void> addItemToList(
    String? listId,
    _i3.ListItem? item,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #addItemToList,
          [
            listId,
            item,
          ],
        ),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);

  @override
  _i5.Future<void> addMultipleItemsToList(
    String? listId,
    List<String>? itemTitles,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #addMultipleItemsToList,
          [
            listId,
            itemTitles,
          ],
        ),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);

  @override
  _i5.Future<void> updateListItem(
    String? listId,
    _i3.ListItem? item,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #updateListItem,
          [
            listId,
            item,
          ],
        ),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);

  @override
  _i5.Future<void> removeItemFromList(
    String? listId,
    String? itemId,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #removeItemFromList,
          [
            listId,
            itemId,
          ],
        ),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);

  @override
  void clearError() => super.noSuchMethod(
        Invocation.method(
          #clearError,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void cleanup() => super.noSuchMethod(
        Invocation.method(
          #cleanup,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  bool updateShouldNotify(
    _i2.ListsState? old,
    _i2.ListsState? current,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #updateShouldNotify,
          [
            old,
            current,
          ],
        ),
        returnValue: false,
      ) as bool);

  @override
  _i4.RemoveListener addListener(
    _i9.Listener<_i2.ListsState>? listener, {
    bool? fireImmediately = true,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #addListener,
          [listener],
          {#fireImmediately: fireImmediately},
        ),
        returnValue: () {},
      ) as _i4.RemoveListener);

  @override
  void dispose() => super.noSuchMethod(
        Invocation.method(
          #dispose,
          [],
        ),
        returnValueForMissingStub: null,
      );
}

/// A class which mocks [CustomListRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockCustomListRepositoryTest extends _i1.Mock
    implements _i10.CustomListRepository {
  MockCustomListRepositoryTest() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i5.Future<List<_i8.CustomList>> getAll() => (super.noSuchMethod(
        Invocation.method(
          #getAll,
          [],
        ),
        returnValue: _i5.Future<List<_i8.CustomList>>.value(<_i8.CustomList>[]),
      ) as _i5.Future<List<_i8.CustomList>>);

  @override
  _i5.Future<_i8.CustomList?> getById(String? id) => (super.noSuchMethod(
        Invocation.method(
          #getById,
          [id],
        ),
        returnValue: _i5.Future<_i8.CustomList?>.value(),
      ) as _i5.Future<_i8.CustomList?>);

  @override
  _i5.Future<void> save(_i8.CustomList? list) => (super.noSuchMethod(
        Invocation.method(
          #save,
          [list],
        ),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);

  @override
  _i5.Future<void> update(_i8.CustomList? list) => (super.noSuchMethod(
        Invocation.method(
          #update,
          [list],
        ),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);

  @override
  _i5.Future<void> delete(String? id) => (super.noSuchMethod(
        Invocation.method(
          #delete,
          [id],
        ),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);

  @override
  _i5.Future<List<_i8.CustomList>> getAllLists() => (super.noSuchMethod(
        Invocation.method(
          #getAllLists,
          [],
        ),
        returnValue: _i5.Future<List<_i8.CustomList>>.value(<_i8.CustomList>[]),
      ) as _i5.Future<List<_i8.CustomList>>);

  @override
  _i5.Future<_i8.CustomList?> getListById(String? id) => (super.noSuchMethod(
        Invocation.method(
          #getListById,
          [id],
        ),
        returnValue: _i5.Future<_i8.CustomList?>.value(),
      ) as _i5.Future<_i8.CustomList?>);

  @override
  _i5.Future<void> saveList(_i8.CustomList? list) => (super.noSuchMethod(
        Invocation.method(
          #saveList,
          [list],
        ),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);

  @override
  _i5.Future<void> updateList(_i8.CustomList? list) => (super.noSuchMethod(
        Invocation.method(
          #updateList,
          [list],
        ),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);

  @override
  _i5.Future<void> deleteList(String? id) => (super.noSuchMethod(
        Invocation.method(
          #deleteList,
          [id],
        ),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);

  @override
  _i5.Future<List<_i8.CustomList>> searchByName(String? query) =>
      (super.noSuchMethod(
        Invocation.method(
          #searchByName,
          [query],
        ),
        returnValue: _i5.Future<List<_i8.CustomList>>.value(<_i8.CustomList>[]),
      ) as _i5.Future<List<_i8.CustomList>>);

  @override
  _i5.Future<List<_i8.CustomList>> searchByDescription(String? query) =>
      (super.noSuchMethod(
        Invocation.method(
          #searchByDescription,
          [query],
        ),
        returnValue: _i5.Future<List<_i8.CustomList>>.value(<_i8.CustomList>[]),
      ) as _i5.Future<List<_i8.CustomList>>);

  @override
  _i5.Future<List<_i8.CustomList>> searchListsByName(String? query) =>
      (super.noSuchMethod(
        Invocation.method(
          #searchListsByName,
          [query],
        ),
        returnValue: _i5.Future<List<_i8.CustomList>>.value(<_i8.CustomList>[]),
      ) as _i5.Future<List<_i8.CustomList>>);

  @override
  _i5.Future<List<_i8.CustomList>> searchListsByDescription(String? query) =>
      (super.noSuchMethod(
        Invocation.method(
          #searchListsByDescription,
          [query],
        ),
        returnValue: _i5.Future<List<_i8.CustomList>>.value(<_i8.CustomList>[]),
      ) as _i5.Future<List<_i8.CustomList>>);

  @override
  _i5.Future<List<_i8.CustomList>> getByType(_i6.ListType? type) =>
      (super.noSuchMethod(
        Invocation.method(
          #getByType,
          [type],
        ),
        returnValue: _i5.Future<List<_i8.CustomList>>.value(<_i8.CustomList>[]),
      ) as _i5.Future<List<_i8.CustomList>>);

  @override
  _i5.Future<List<_i8.CustomList>> getListsByType(_i6.ListType? type) =>
      (super.noSuchMethod(
        Invocation.method(
          #getListsByType,
          [type],
        ),
        returnValue: _i5.Future<List<_i8.CustomList>>.value(<_i8.CustomList>[]),
      ) as _i5.Future<List<_i8.CustomList>>);

  @override
  _i5.Future<void> clearAll() => (super.noSuchMethod(
        Invocation.method(
          #clearAll,
          [],
        ),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);

  @override
  _i5.Future<void> clearAllLists() => (super.noSuchMethod(
        Invocation.method(
          #clearAllLists,
          [],
        ),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);
}

/// A class which mocks [ListItemRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockListItemRepositoryTest extends _i1.Mock
    implements _i11.ListItemRepository {
  MockListItemRepositoryTest() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i5.Future<List<_i3.ListItem>> getAll() => (super.noSuchMethod(
        Invocation.method(
          #getAll,
          [],
        ),
        returnValue: _i5.Future<List<_i3.ListItem>>.value(<_i3.ListItem>[]),
      ) as _i5.Future<List<_i3.ListItem>>);

  @override
  _i5.Future<_i3.ListItem?> getById(String? id) => (super.noSuchMethod(
        Invocation.method(
          #getById,
          [id],
        ),
        returnValue: _i5.Future<_i3.ListItem?>.value(),
      ) as _i5.Future<_i3.ListItem?>);

  @override
  _i5.Future<_i3.ListItem> add(_i3.ListItem? item) => (super.noSuchMethod(
        Invocation.method(
          #add,
          [item],
        ),
        returnValue: _i5.Future<_i3.ListItem>.value(_FakeListItem_1(
          this,
          Invocation.method(
            #add,
            [item],
          ),
        )),
      ) as _i5.Future<_i3.ListItem>);

  @override
  _i5.Future<_i3.ListItem> update(_i3.ListItem? item) => (super.noSuchMethod(
        Invocation.method(
          #update,
          [item],
        ),
        returnValue: _i5.Future<_i3.ListItem>.value(_FakeListItem_1(
          this,
          Invocation.method(
            #update,
            [item],
          ),
        )),
      ) as _i5.Future<_i3.ListItem>);

  @override
  _i5.Future<void> delete(String? id) => (super.noSuchMethod(
        Invocation.method(
          #delete,
          [id],
        ),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);

  @override
  _i5.Future<List<_i3.ListItem>> getByListId(String? listId) =>
      (super.noSuchMethod(
        Invocation.method(
          #getByListId,
          [listId],
        ),
        returnValue: _i5.Future<List<_i3.ListItem>>.value(<_i3.ListItem>[]),
      ) as _i5.Future<List<_i3.ListItem>>);
}

/// A class which mocks [ListsFilterService].
///
/// See the documentation for Mockito's code generation for more information.
class MockListsFilterServiceTest extends _i1.Mock
    implements _i7.ListsFilterService {
  MockListsFilterServiceTest() {
    _i1.throwOnMissingStub(this);
  }

  @override
  List<_i8.CustomList> applyFilters(
    List<_i8.CustomList>? lists, {
    String? searchQuery = '',
    _i6.ListType? selectedType,
    bool? showCompleted = true,
    bool? showInProgress = true,
    String? selectedDateFilter,
    _i7.SortOption? sortOption = _i7.SortOption.NAME_ASC,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #applyFilters,
          [lists],
          {
            #searchQuery: searchQuery,
            #selectedType: selectedType,
            #showCompleted: showCompleted,
            #showInProgress: showInProgress,
            #selectedDateFilter: selectedDateFilter,
            #sortOption: sortOption,
          },
        ),
        returnValue: <_i8.CustomList>[],
      ) as List<_i8.CustomList>);

  @override
  void clearCache() => super.noSuchMethod(
        Invocation.method(
          #clearCache,
          [],
        ),
        returnValueForMissingStub: null,
      );
}
